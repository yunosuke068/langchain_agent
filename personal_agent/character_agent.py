from langchain_openai import ChatOpenAI, AzureChatOpenAI
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.prompts import HumanMessagePromptTemplate
from langchain_core.messages import SystemMessage
from langchain.chains import LLMChain
import os

# „Ç≠„É£„É©Ë®≠ÂÆö
character_defs = {
    "„Ç®„Éº„Ç∏„Çß„É≥„ÉàA": "„ÉÑ„É≥„Éá„É¨„Å™„Ç¢„Éã„É°„Ç≠„É£„É©„ÄÇÁ¥†Áõ¥„Åò„ÇÉ„Å™„ÅÑ„Åå„ÄÅÊú¨ÂΩì„ÅØÂÑ™„Åó„ÅÑ„ÄÇ",
    "„Ç®„Éº„Ç∏„Çß„É≥„ÉàB": "„Åä„Å£„Å®„Çä„Åó„ÅüÂ§©ÁÑ∂Á≥ª„Ç≠„É£„É©„ÄÇ„ÅÑ„Å§„ÇÇ„Éû„Ç§„Éö„Éº„Çπ„ÄÇ",
    "„Ç®„Éº„Ç∏„Çß„É≥„ÉàC": "ÁúüÈù¢ÁõÆ„ÅßÁü•Ë≠òË±äÂØå„Å™„É°„Ç¨„Éç„Ç≠„É£„É©„ÄÇ‰Ωï‰∫ã„Å´„ÇÇÁêÜÂ±à„ÅßÁ≠î„Åà„Çã„ÄÇ",
}

# „É¢„Éá„É´ÂÆöÁæ©
llm = AzureChatOpenAI(
    openai_api_version="2023-05-15",
    deployment_name="gpt-4o",
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    openai_api_key=os.getenv("AZURE_OPENAI_API_KEY"),
)

# ÂêÑ„Ç≠„É£„É©„ÅÆ„Ç®„Éº„Ç∏„Çß„É≥„Éà„ÉÅ„Çß„Éº„É≥ÁîüÊàê
agents = {}
for name, persona in character_defs.items():
    prompt = ChatPromptTemplate.from_messages([
        SystemMessage(content=f"„ÅÇ„Å™„Åü„ÅØ{name}„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆ„Ç≠„É£„É©„Åß„ÄÅ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´ÊåØ„ÇãËàû„Å£„Å¶„Åè„Å†„Åï„ÅÑ:\n{persona}"),
        MessagesPlaceholder(variable_name="chat_history"),
        HumanMessagePromptTemplate.from_template("{input}"),
    ])
    agents[name] = LLMChain(llm=llm, prompt=prompt, verbose=False)

# Â±•Ê≠¥ÂàùÊúüÂåñ
chat_history = []

print("üéôÔ∏è „Ç≠„É£„É©„Ç®„Éº„Ç∏„Çß„É≥„Éà„Åü„Å°„Å®‰ºöË©±„Åó„Åæ„Åó„Çá„ÅÜÔºÅ'exit'„ÅßÁµÇ‰∫Ü„Åó„Åæ„Åô„ÄÇ")

while True:
    user_input = input("üßë „ÅÇ„Å™„Åü> ")
    if user_input.lower() == "exit":
        print("üëã ÁµÇ‰∫Ü„Åó„Åæ„Åô„ÄÇ")
        break

    chat_history.append({"role": "user", "content": user_input})

    # „Ç®„Éº„Ç∏„Çß„É≥„Éà„Åü„Å°„ÅÆÊúÄÂ§ßÁô∫Ë®ÄÊï∞Ôºà‰æã: 3Ôºâ
    max_agent_turns = 3

    # „É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„Åß„Ç®„Éº„Ç∏„Çß„É≥„ÉàÁô∫Ë®Ä
    for i, (name, agent_chain) in enumerate(agents.items()):
        if i >= max_agent_turns:
            break

        try:
            # Â±•Ê≠¥„ÇíÊ∏°„Åó„Å¶Áô∫Ë®Ä„Åï„Åõ„Çã
            result = agent_chain.invoke({
                "input": f"ÊúÄÊñ∞„ÅÆ‰ºöË©±„Å´ËøîÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
                "chat_history": chat_history
            })

            print(f"ü§ñ {name}> {result['text']}")
            chat_history.append({"role": "assistant", "name": name, "content": result["text"]})

        except Exception as e:
            print(f"‚ö†Ô∏è {name}„ÅÆÁô∫Ë®Ä„Ç®„É©„Éº: {e}")
